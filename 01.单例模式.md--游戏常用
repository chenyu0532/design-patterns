```
保证一个类仅有一个实例，并提供一个访问它的全局访问点
经常用于：日志系统(log)  存储系统  数据库的链接(Http websocket) 等资源共享的情况

如果遇到多线程的语言，简单的单例也会执行多个，需要特殊处理下
js是单线程的，暂时不需要考虑这个 (除了H5中的worker)

js中常用的方法有：
    1 把全局变量当做单例来使用
       let my = {}
       my.namespace = function(){ ... }
       export default my;
     2  惰性单例(最常用)：即在需要的时候才创建对象实例，也叫惰性实例
    statics: {
         instance: null
    },
     if (storageUtils.instance == null) {
         storageUtils.instance = new storageUtils();
     }
    return storageUtils.instance;

3  急切创建实例，常用 立即执行函数
storageUtils.getInstance = (function() {
    let instance = null;
    return function() {
        if (!instance) {
            console.log('storageutils getInstance');
            instance = new storageUtils();
        }
        return instance;
    }
})();
或者
var counter = (function () {
    var i = 0;
    return {
        get: function () {
            return i;
        },
        set: function (val) {
            i = val;
        },
        increment: function () {
            return ++i;
        }
    };
} ());
或者更好的写法是：
getSingle(fn){
        let result;
        return function(){
            return result || (result = fn.apply(this, arguments));
        }
    }
let o = function() {
    storageUtils = new storageUtils();
    return storageUtils;
}
storageUtils.getInstance = utils.getSingle(o)
